import React, { memo, useState } from "react";
import { Handle, Position } from "@xyflow/react";
import type { UMLClassData } from "@/types/uml";

export type ImprovedUMLClassNodeProps = {
  id: string;
  data: UMLClassData;
  selected?: boolean;
  onClick?: (id: string) => void;
};

const getVisibilitySymbol = (visibility: string) => {
  switch (visibility) {
    case 'public': return '+';
    case 'private': return '-';
    case 'protected': return '#';
    case 'package': return '~';
    default: return '+';
  }
};

const ImprovedUMLClassNode = memo(({ id, data, selected, onClick }: ImprovedUMLClassNodeProps) => {
  const [isHovering, setIsHovering] = useState(false);

  const handleClick = () => {
    onClick?.(id);
  };

  const handleStyle = (visible: boolean = false) => ({
    width: '10px',
    height: '10px',
    background: visible ? '#3b82f6' : 'transparent',
    border: visible ? '2px solid white' : '2px solid transparent',
    borderRadius: '50%',
    opacity: visible ? 1 : 0,
    transition: 'all 0.2s ease',
    zIndex: 10,
  });

  const showHandles = selected || isHovering;

  return (
    <div 
      className="bg-white dark:bg-gray-800 border-2 border-gray-800 dark:border-gray-300 rounded-lg min-w-[200px] shadow-lg transition-all duration-200 hover:shadow-xl cursor-pointer font-sans"
      onClick={handleClick}
      onMouseEnter={() => setIsHovering(true)}
      onMouseLeave={() => setIsHovering(false)}
      style={{
        borderColor: selected ? '#3b82f6' : undefined,
        boxShadow: selected ? '0 0 0 2px rgba(59, 130, 246, 0.3)' : undefined,
      }}
    >
      {/* Header con el nombre de la clase */}
      <div className="bg-gray-50 dark:bg-gray-700 p-3 text-center border-b border-gray-300 dark:border-gray-600 rounded-t-md">
        <h3 className="font-bold text-base text-gray-900 dark:text-gray-100 m-0">
          {data.className}
        </h3>
      </div>

      {/* Sección de Atributos */}
      <div className="min-h-[40px]">
        <div className="h-px bg-gray-300 dark:bg-gray-600"></div>
        {data.attributes.length > 0 ? (
          data.attributes.map((attr, index) => (
            <div 
              key={index} 
              className="px-4 py-1.5 text-xs text-gray-700 dark:text-gray-300 border-b border-gray-100 dark:border-gray-700 last:border-b-0"
            >
              {getVisibilitySymbol(attr.visibility)} {attr.name}: {attr.type}
            </div>
          ))
        ) : (
          <div className="px-4 py-3 text-xs text-gray-400 dark:text-gray-500 italic text-center">
            No attributes
          </div>
        )}
      </div>

      {/* Sección de Métodos */}
      <div className="min-h-[40px]">
        <div className="h-px bg-gray-300 dark:bg-gray-600"></div>
        {data.methods.length > 0 ? (
          data.methods.map((method, index) => (
            <div 
              key={index} 
              className="px-4 py-1.5 text-xs text-gray-700 dark:text-gray-300 border-b border-gray-100 dark:border-gray-700 last:border-b-0"
            >
              {getVisibilitySymbol(method.visibility)} {method.name}(
              {method.parameters.map(p => `${p.name}: ${p.type}`).join(', ')}
              ): {method.returnType}
            </div>
          ))
        ) : (
          <div className="px-4 py-3 text-xs text-gray-400 dark:text-gray-500 italic text-center">
            No methods
          </div>
        )}
      </div>

      {/* Handles de Conexión - Posicionados como en Enterprise Architect */}
      
      {/* Handles Superiores */}
      <Handle
        id="top-left"
        type="source"
        position={Position.Top}
        style={{
          ...handleStyle(showHandles),
          left: '25%',
          top: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="top-center"
        type="source"
        position={Position.Top}
        style={{
          ...handleStyle(showHandles),
          left: '50%',
          top: '-5px',
          transform: 'translateX(-50%)',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="top-right"
        type="source"
        position={Position.Top}
        style={{
          ...handleStyle(showHandles),
          right: '25%',
          top: '-5px',
        }}
        className="connection-handle"
      />

      {/* Handles Inferiores */}
      <Handle
        id="bottom-left"
        type="target"
        position={Position.Bottom}
        style={{
          ...handleStyle(showHandles),
          left: '25%',
          bottom: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="bottom-center"
        type="target"
        position={Position.Bottom}
        style={{
          ...handleStyle(showHandles),
          left: '50%',
          bottom: '-5px',
          transform: 'translateX(-50%)',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="bottom-right"
        type="target"
        position={Position.Bottom}
        style={{
          ...handleStyle(showHandles),
          right: '25%',
          bottom: '-5px',
        }}
        className="connection-handle"
      />

      {/* Handles Izquierdos */}
      <Handle
        id="left-top"
        type="target"
        position={Position.Left}
        style={{
          ...handleStyle(showHandles),
          top: '25%',
          left: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="left-center"
        type="target"
        position={Position.Left}
        style={{
          ...handleStyle(showHandles),
          top: '50%',
          left: '-5px',
          transform: 'translateY(-50%)',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="left-bottom"
        type="target"
        position={Position.Left}
        style={{
          ...handleStyle(showHandles),
          bottom: '25%',
          left: '-5px',
        }}
        className="connection-handle"
      />

      {/* Handles Derechos */}
      <Handle
        id="right-top"
        type="source"
        position={Position.Right}
        style={{
          ...handleStyle(showHandles),
          top: '25%',
          right: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="right-center"
        type="source"
        position={Position.Right}
        style={{
          ...handleStyle(showHandles),
          top: '50%',
          right: '-5px',
          transform: 'translateY(-50%)',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="right-bottom"
        type="source"
        position={Position.Right}
        style={{
          ...handleStyle(showHandles),
          bottom: '25%',
          right: '-5px',
        }}
        className="connection-handle"
      />

      {/* Handles en las esquinas - como en Enterprise Architect */}
      <Handle
        id="corner-top-left"
        type="source"
        position={Position.Top}
        style={{
          ...handleStyle(showHandles),
          left: '8px',
          top: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="corner-top-right"
        type="source"
        position={Position.Top}
        style={{
          ...handleStyle(showHandles),
          right: '8px',
          top: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="corner-bottom-left"
        type="target"
        position={Position.Bottom}
        style={{
          ...handleStyle(showHandles),
          left: '8px',
          bottom: '-5px',
        }}
        className="connection-handle"
      />
      
      <Handle
        id="corner-bottom-right"
        type="target"
        position={Position.Bottom}
        style={{
          ...handleStyle(showHandles),
          right: '8px',
          bottom: '-5px',
        }}
        className="connection-handle"
      />

      {/* Indicador de que el nodo es seleccionable */}
      {showHandles && (
        <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded pointer-events-none opacity-75">
          Puntos azules: arrastrar para conectar
        </div>
      )}
    </div>
  );
});

ImprovedUMLClassNode.displayName = 'ImprovedUMLClassNode';

export default ImprovedUMLClassNode;