name: Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: uml-diagrams-backend
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd editor/my-project
        npm ci

    - name: Run Python tests
      run: |
        cd backend
        python manage.py test --settings=uml_diagrams_backend.settings

    - name: Run frontend linting
      run: |
        cd editor/my-project
        npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      run: |
        cd editor/my-project
        npm ci
        npm run build:prod

    - name: Copy frontend build to backend
      run: |
        mkdir -p backend/static/frontend
        cp -r editor/build/* backend/static/frontend/ 2>/dev/null || echo "Frontend build directory not found"

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project $PROJECT_ID
        gcloud config set app/cloud_build_timeout 1600

    - name: Create app.yaml from template
      run: |
        cd backend
        envsubst < app.yaml.template > app.yaml
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        GS_BUCKET_NAME: ${{ secrets.GS_BUCKET_NAME }}
        GS_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

    - name: Deploy to App Engine
      run: |
        cd backend
        gcloud app deploy --quiet --no-promote

    - name: Run database migrations
      run: |
        cd backend
        gcloud app deploy migrate.yaml --quiet

    - name: Promote version to receive traffic
      run: |
        VERSION=$(gcloud app versions list --service=default --sort-by=~version.createTime --limit=1 --format="value(version.id)")
        gcloud app services set-traffic default --splits $VERSION=100